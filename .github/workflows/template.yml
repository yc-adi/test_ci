name: template

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  template_job:
    # The type of runner that the job will run on
    runs-on: [ self-hosted ]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:          
          submodules: false
          repository: Analog-Devices-MSDK/msdk
          ref: main
      
      - uses: actions/checkout@v3
        with:          
          submodules: false
          repository: yc-adi/ble_auto_testing
          ref: main
          path: ble_auto_testing

      - uses: actions/checkout@v3
        with:
          submodules: false
          repository: yc-adi/msdk_ci_per_tool
          ref: main
          path: msdk_ci_per_tool

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          # Update the submodules below, doing so here will convert ssh to https
          submodules: false
          path: Libraries/RF-PHY-closed
          fetch-depth: 0

      - name: clean
        run: |

          echo PWD: `pwd`
          ls -hal 
          echo
          
          # Clean up the working copy
          git scorch

          # Update the submodules, this will use ssh
          git submodule init
          git submodule sync
          git submodule update --init --recursive

          # Remove old archives
          rm -f *.zip

      - name: set_env
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

        run: |

          echo PWD: `pwd`

          # Get the configuration
          CONFIG_FILE=$(python3 -c "import os; print(os.path.expanduser('~/Workspace/ci_config/RF-PHY-closed.json'))")

          DO_MAX32655=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['test_full_per.yml']['do_max32655'])")
          DO_MAX32665=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['test_full_per.yml']['do_max32665'])")
          DO_MAX32690=$(python3 -c "import json; import os; obj=json.load(open('${CONFIG_FILE}')); print(obj['tests']['test_full_per.yml']['do_max32690'])")
          echo "::set-env name=DO_MAX32655::${DO_MAX32655}"
          echo "::set-env name=DO_MAX32665::${DO_MAX32665}"
          echo "::set-env name=DO_MAX32690::${DO_MAX32690}"
          echo

      - name: build
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  
        run: |

          echo DO_MAX32655: ${DO_MAX32655}
          echo DO_MAX32665: ${DO_MAX32665}
          echo DO_MAX32690: ${DO_MAX32690}
          echo

          # Use python 3.10.9
          python3 -c "import sys; print(sys.version)"
          source ~/anaconda3/etc/profile.d/conda.sh && conda activate py3_10
          python3 -c "import sys; print(sys.version)"
          echo


      - name: test_max32665
        run: |

          echo DO_MAX32655: ${DO_MAX32655}
          echo DO_MAX32665: ${DO_MAX32665}
          echo DO_MAX32690: ${DO_MAX32690}
          echo

          echo PWD: `pwd`
          echo

          # save the job related info in the file
          FILE_MAX32665=/home/$USER/Workspace/Resource_Share/template_$(date +%Y-%m-%d_%H-%M-%S)_max32665.txt
          echo "::set-env name=DO_MAX32655::${DO_MAX32655}"
          echo FILE_MAX32665: ${FILE_MAX32665}

          # Lock the hardware resources
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/32665_1.txt
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/32665_2.txt

          echo "/home/$USER/Workspace/Resource_Share/1.txt" >  ${FILE_MAX32665}
          echo "/home/$USER/Workspace/Resource_Share/2.txt" >> ${FILE_MAX32665}

          echo "cat ${FILE_MAX32665}"
          cat ${FILE_MAX32665}

          for i in {1..60}; do
            echo $i
            sleep 60
          done

          echo "-------------------------------------------------------------------------"
          echo "DONE!"
          echo "-------------------------------------------------------------------------"

      # Unlock even when cancelled or failed
      - name: unlock_max32665        
        if: always()
        run: |

          echo FILE_MAX32665: ${FILE_MAX32665}
          echo

          # Use python 3.10.9
          python3 -c "import sys; print(sys.version)"
          source ~/anaconda3/etc/profile.d/conda.sh && conda activate py3_10
          python3 -c "import sys; print(sys.version)"
          echo

          echo "Show Resource_Share"
          ls -hal /home/$USER/Workspace/Resource_Share
          echo

          if [ -f "${FILE_MAX32665}" ]; then
            while IFS= read -r line; do
              echo ${line}
              python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py ${line}
          fi

      - name: test_max32655             
        run: |

          echo DO_MAX32655: ${DO_MAX32655}
          echo DO_MAX32665: ${DO_MAX32665}
          echo DO_MAX32690: ${DO_MAX32690}
          echo

          echo PWD: `pwd`
          echo

          # save the job related info in the file
          FILE_MAX32655=/home/$USER/Workspace/Resource_Share/template_$(date +%Y-%m-%d_%H-%M-%S)_max32655.txt
          echo "::set-env name=DO_MAX32655::${DO_MAX32655}"
          echo FILE_MAX32655: ${FILE_MAX32655}

          # Lock the hardware resources
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/32655_1.txt
          python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py -l -t 3600 /home/$USER/Workspace/Resource_Share/32655_2.txt

          echo "/home/$USER/Workspace/Resource_Share/1.txt" >  ${FILE_MAX32655}
          echo "/home/$USER/Workspace/Resource_Share/2.txt" >> ${FILE_MAX32655}

          echo "cat ${FILE_MAX32655}"
          cat ${FILE_MAX32655}

          for i in {1..60}; do
            echo $i
            sleep 60
          done

          echo "-------------------------------------------------------------------------"
          echo "DONE!"
          echo "-------------------------------------------------------------------------"

      # Unlock even when cancelled or failed
      - name: unlock_max32655        
        if: always()
        run: |

          echo FILE_MAX32655: ${FILE_MAX32655}
          echo

          # Use python 3.10.9
          python3 -c "import sys; print(sys.version)"
          source ~/anaconda3/etc/profile.d/conda.sh && conda activate py3_10
          python3 -c "import sys; print(sys.version)"
          echo

          echo "Show Resource_Share"
          ls -hal /home/$USER/Workspace/Resource_Share
          echo

          if [ -f "${FILE_MAX32655}" ]; then
            while IFS= read -r line; do
              echo ${line}
              python3 /home/$USER/Workspace/Resource_Share/Resource_Share.py ${line}
          fi

